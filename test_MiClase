from os import name
import unittest
from Examen2 import MiClase

class TestMiClaseMethods(unittest.TestCase):

    def setUp(self):
        self.objeto = MiClase(5, 120, 12, ["Canción 1", "Canción 2", "Canción 3"], [0.8, 0.9, 0.7])

    def test_ObtieneValencia(self):
        try:
            # Caso de prueba 1
            resultado = self.objeto.ObtieneValencia(1234567)
            self.assertEqual(resultado, 4)

            # Caso de prueba 2
            resultado = self.objeto.ObtieneValencia(24680)
            self.assertEqual(resultado, 0)

            return True  # Test passed
        except Exception as e:
            return str(e)  # Return the error message

    def test_DivisibleTempo(self):
        try:
            # Caso de prueba 1
            resultado = self.objeto.DivisibleTempo(10)
            self.assertEqual(resultado, [1, 2, 5, 10])

            # Caso de prueba 2
            resultado = self.objeto.DivisibleTempo(7)
            self.assertEqual(resultado, [1, 7])

            return True  # Test passed
        except Exception as e:
            return str(e)  # Return the error message

    def test_ObtieneMasBailable(self):
        try:
            # Caso de prueba 1
            resultado = self.objeto.ObtieneMasBailable([0.8, 0.9, 0.7])
            self.assertEqual(resultado, 0.9)

            # Caso de prueba 2
            resultado = self.objeto.ObtieneMasBailable([0.5, 0.6, 0.4])
            self.assertEqual(resultado, 0.6)

            return True  # Test passed
        except Exception as e:
            return str(e)  # Return the error message

    def test_VerificaListaCanciones(self):
        try:
            # Caso de prueba 1
            resultado = self.objeto.VerificaListaCanciones(["Canción 1", "Canción 2", "Canción 3"])
            self.assertTrue(resultado)

            # Caso de prueba 2
            resultado = self.objeto.VerificaListaCanciones(["Canción 1", None, "Canción 3"])
            self.assertFalse(resultado)

            return True  # Test passed
        except Exception as e:
            return str(e)  # Return the error message
    
    def test_Encuentra_elemento_en_lista(self):
        try:
            # Caso de prueba 1
            lista = [1, 2, 3, 4, 5]
            elemento_existente = 3
            resultado = self.objeto.Encuentra(lista, elemento_existente)
            self.assertTrue(resultado)

            # Caso de prueba 2
            lista = ["Canción 1", "Canción 2", "Canción 3"]
            elemento_existente = "Canción 3"
            resultado = self.objeto.Encuentra(lista, elemento_existente)
            self.assertTrue(resultado)

            return True  # Test passed
        except Exception as e:
            return str(e)  # Return the error message

if __name__ == '__main__':
    result = unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(TestMiClaseMethods))
    if result.wasSuccessful():
        print("All tests passed successfully.")
    else:
        print("Some tests failed. Details:")
        for failure in result.failures:
            print(failure[1])
